// import java.util.ArrayDeque;
// import java.util.Deque;
// import java.util.Arrays;

public class Solution {
    public int sumSubarrayMins(int[] arr) {
        int length = arr.length;
        int[] left = new int[length];
        int[] right = new int[length];

        Arrays.fill(left, -1);
        Arrays.fill(right, length);

        Deque<Integer> stack = new ArrayDeque<>();

        // Calculate left and right boundaries using a single stack
        for (int i = 0; i < length; ++i) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                right[stack.pop()] = i;
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        int mod = (int) 1e9 + 7;
        long answer = 0;

        // Calculate the final sum
        for (int i = 0; i < length; ++i) {
            answer += (long) (i - left[i]) * (right[i] - i) % mod * arr[i] % mod;
            answer %= mod;
        }

        return (int) answer;
    }

    public static void main(String[] args) {
        // Example usage
        Solution solution = new Solution();
        int[] arr = { 3, 1, 2, 4 };
        System.out.println(solution.sumSubarrayMins(arr)); // Output: 17
    }
}
